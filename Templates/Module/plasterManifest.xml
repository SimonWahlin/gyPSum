<?xml version="1.0" encoding="utf-8"?>
<plasterManifest schemaVersion="1.0"
  xmlns="http://www.microsoft.com/schemas/PowerShell/Plaster/v1">
  <metadata>
    <name>PSModule</name>
    <id>d4215a18-ea33-4786-8e3f-35bd161e961d</id>
    <version>2.0.0</version>
    <title>PS Module Template</title>
    <description>Template for creating a minimal PowerShell module</description>
    <author>Simon Wahlin</author>
    <tags>Module, ModuleManifest</tags>
  </metadata>
  
  <parameters>  
    <!-- 
    Supports three scenarios:
      * Full Module
        Enables all features, this is the default choise
      * Minimal Module
        Scaffolding minimal structure to build a module
      * Custom Module
        Choose each feature 
    !-->
    <parameter name="ModuleType" type="choice" default="0" prompt="Select the type of Module you would like to create:">
      <choice label="Full &amp;Module"
            help="Creates a full module."
            value="FullModule"/>

      <choice label="&amp;Minimal Module"
            help="Creates a minimal module with minimal structure and build scripts."
            value="MinimalModule"/>

      <choice label="Custom &amp;Custom Module..."
            help="Will prompt you for more details as to what you'd like to scaffold."
            value="CustomModule"/>
    </parameter>

    <!--  AUTHOR  -->
    <parameter store="text" name="ModuleAuthor" type="user-fullname" prompt="Author's name" />
    
    <!--  NAME  -->
    <parameter store="text" name="ModuleName" type="text" prompt="Name of your module" />
    
    <!--  DESCRIPTION  -->
    <parameter name="ModuleDescription" type="text" prompt="Description of this module" />
    
    <!--  MODULE VERSION  -->
    <parameter name="ModuleVersion" type="text" prompt="Module version"  default="0.0.1" />

    <!--  USE GIT  -->
    <parameter name="UseGit" type="choice" prompt="Will create a gitignore file and show parameters related to git" default="1" 
      condition="$PLASTER_PARAM_ModuleType -in @('CustomModule')" >
      <choice label="&amp;Yes" value="true" />
      <choice label="&amp;No" value="false" />
    </parameter>

    <!--  DEFAULT BRANCH  -->
    <parameter store="text" name="MainGitBranch" type="text" prompt="Name of your default branch" default="main" 
      condition="$PLASTER_PARAM_UseGit -eq 'true' -or $PLASTER_PARAM_ModuleType -in @('FullModule')"/>
    
    <!--  GITVERSION  -->
    <parameter name="UseGitVersion" type="choice" 
      prompt="Do you want to add configuration for GitVersion to handle automatic versioning for your project?" 
      default="0" condition="$PLASTER_PARAM_UseGit -eq 'true'" >
      <choice label="&amp;Yes" value="true" />
      <choice label="&amp;No" value="false" />
    </parameter>

    <!--  GITHUB  -->
    <parameter name="UseGitHub" type="choice" prompt="Will you use GitHub.com as the collaboration platform for the project?" 
      default="0" condition="$PLASTER_PARAM_UseGit -eq 'true' -and $PLASTER_PARAM_ModuleType -notin @('MinimalModule')" >
      <choice label="&amp;Yes" value="true" />
      <choice label="&amp;No" value="false" />
    </parameter>

    <!--  AZURE PIPELINES  -->
    <parameter name="UseAzurePipelines" type="choice" prompt="Do you want to use Azure Pipelines to run the the build, test and or deploy pipeline?" 
      default="1" condition="$PLASTER_PARAM_UseGit -eq 'true' -and $PLASTER_PARAM_ModuleType -notin @('MinimalModule')" >
      <choice label="&amp;Yes" value="true" />
      <choice label="&amp;No" value="false" />
    </parameter>

    <!--  VSCODE  -->
    <parameter name="UseVSCode" type="choice" prompt="Will you use Visual Studio Code as the code editor for the project?" 
			default="0" condition="$PLASTER_PARAM_ModuleType -in @('CustomModule')" >
      <choice label="&amp;Yes" value="true" />
      <choice label="&amp;No" value="false" />
    </parameter>

    <!--  LICENSE  -->
    <parameter store="text"  name="LicenseType" type="choice" prompt="What license do you want?" default="0"
      condition="$PLASTER_PARAM_ModuleType -in @('CustomModule', 'FullModule')" >
			<choice label="&amp;MIT"
              help="Adds an MIT license file."
              value="MIT" />

      <choice label="&amp;Apache"
              help="Adds an Apache license file."
              value="Apache" />

      <choice label="&amp;None"
              help="No license specified."
              value="None" />
    </parameter>

    <!--  SOURCE DIRECTORY  -->
    <parameter store="text" name="SourceDirectory" type="choice" prompt="What name do you give your source folder?" default="0"
      condition="$PLASTER_PARAM_ModuleType -in @('CustomModule','FullModule')" >
          <choice label="&amp;Source" value="Source" />
          <choice label="&amp;The Module's name (${PLASTER_PARAM_ModuleName})" value="${PLASTER_PARAM_ModuleName}" />
          <choice label="s&amp;rc" value="src" />
    </parameter>

    <!--  FEATURES  -->
    <parameter name="Features" type="multichoice" prompt="What feature would you like to add to your project?" default="0,1" condition="$PLASTER_PARAM_ModuleType -eq 'CustomModule'" >
      <choice label="&amp;Unit Tests"
              help="Adds Tests folders and example with your features."
              value="UnitTests"/>

      <choice label="&amp;Build"
              help="Adds Build scripts."
              value="Build"/>
    </parameter>
  </parameters>

  <content>
    <!--   SOURCE MAIN Folder -->
    <file source=""
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')"
    />

    <!--   PESTER MAIN FOLDER -->
    <file source=""
          destination="${PLASTER_PARAM_ModuleName}/Tests"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />

    <!--   CLASSES Folder-->
    <file source=""
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/Classes"
    />

    <!--   CLASSES Samples Files -->
    <file source="../Classes/Classes/1.class1.ps1"
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/Classes/1.class1.ps1"
    />
    <file source="../Classes/Classes/2.class2.ps1"
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/Classes/2.class2.ps1"
    />
    <file source="../Classes/Classes/3.class11.ps1"
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/Classes/3.class11.ps1"
    />
    <file source="../Classes/Classes/4.class12.ps1"
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/Classes/4.class12.ps1"
    />

    <!--   UNIT TESTS Classes Sample Files -->
    <file source="../Classes/tests/class1.tests.ps1"
          destination="${PLASTER_PARAM_ModuleName}/Tests/Classes/class1.tests.ps1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />
    <file source="../Classes/tests/class2.tests.ps1"
          destination="${PLASTER_PARAM_ModuleName}/Tests/Classes/class2.tests.ps1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />
    <file source="../Classes/tests/class11.tests.ps1"
          destination="${PLASTER_PARAM_ModuleName}/Tests/Classes/class11.tests.ps1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />
    <file source="../Classes/tests/class12.tests.ps1"
          destination="${PLASTER_PARAM_ModuleName}/Tests/Classes/class12.tests.ps1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />

    <!--   PRIVATE FUNCTIONS Folder-->
    <file source=""
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/Private"
    />

    <!--   PRIVATE FUNCTION Sample -->
    <file source="../PrivateFunction/Get-PrivateFunction.ps1.template"
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/Private/Get-PrivateFunction.ps1"
    />

    <!--   UNIT TESTS Private Functions folder -->
    <file source=""
          destination="${PLASTER_PARAM_ModuleName}/Tests/Private"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />

    <!--   UNIT TESTS Private Functions Sample Files -->
    <templateFile source="../PrivateFunction/Get-PrivateFunction.tests.ps1.template"
          destination="${PLASTER_PARAM_ModuleName}/Tests/Private/Get-PrivateFunction.tests.ps1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />

    <!--   PUBLIC FUNCTIONS Folder -->
    <file source=""
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/Public"
    />

    <!--   PUBLIC FUNCTION Sample -->
    <templateFile source="../PublicFunction/Get-Something.ps1.template"
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/Public/Get-Something.ps1"
    />

    <!--   UNIT TESTS Public folder -->
    <file source=""
          destination="${PLASTER_PARAM_ModuleName}/Tests/Public"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />

    <!--   UNIT TESTS Public Functions Sample Files -->
    <templateFile source="../PublicFunction/Get-Something.tests.ps1.template"
          destination="${PLASTER_PARAM_ModuleName}/Tests/Public/Get-Something.tests.ps1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />

    <!--   QUALITY TESTS for Module -->
    <templateFile source="module.tests.ps1.template"
          destination="${PLASTER_PARAM_ModuleName}/Tests/module.tests.ps1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('UnitTests')"
    />
    
    <!--   WikiSource FOLDER -->
    <!-- <file source=""
          destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/WikiSource"
          condition="${PLASTER_PARAM_Features} -Contains 'All' -or ${PLASTER_PARAM_ModuleType} -in @('dsccommunity','FullModule')"
    /> -->

    <!--   GITIGNORE -->
    <file source="../Git/gitignore"
          destination="${PLASTER_PARAM_ModuleName}/.gitignore"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or $PLASTER_PARAM_UseGit -eq 'true'"
    />

    <!-- BUILD SCRIPTS -->
    <!--   BUILD.ps1 (ENTRY POINT) -->
    <file source="../Build/build.ps1"
          destination="${PLASTER_PARAM_ModuleName}/build.ps1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('Build')"
    />

    <!--   REQUIRED MODULES MANIFEST -->
    <templateFile source="../Build/RequiredModules.psd1.template"
          destination="${PLASTER_PARAM_ModuleName}/RequiredModules.psd1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('Build')"
    />

    <!--   RESOLVE DEPENDENCY Script (used in build.ps1) -->
    <file source="../Build/Resolve-Dependency.ps1"
          destination="${PLASTER_PARAM_ModuleName}/Resolve-Dependency.ps1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('Build')"
    />

    <templateFile source="../Build/Resolve-Dependency.psd1.template"
          destination="${PLASTER_PARAM_ModuleName}/Resolve-Dependency.psd1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('Build')"
    />

    <!--   BUILD YAML CONFIGURATION -->
    <templateFile source="../Build/build.yaml.template"
          destination="${PLASTER_PARAM_ModuleName}/build.yaml"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_Features} -Contains ('Build')"
    />

    <!--   AZURE PIPELINES -->
    <templateFile source="azure-pipelines.yml.template"
          destination="${PLASTER_PARAM_ModuleName}/azure-pipelines.yml"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or $PLASTER_PARAM_UseAzurePipelines -eq 'true'"
    />
    
    <!-- MODULE MANIFEST -->
    <newModuleManifest destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        moduleVersion="$PLASTER_PARAM_ModuleVersion"
        author="$PLASTER_PARAM_ModuleAuthor"
        companyName="$PLASTER_PARAM_ModuleAuthor"
        description="$PLASTER_PARAM_ModuleDescription"
        rootModule="$PLASTER_PARAM_ModuleName.psm1"
        condition="-not (Test-Path -Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;)"
    />

    <!-- Add Prerelease property if it does not exist -->
    <modify path="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        condition="Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;">
            <replace condition="$PLASTER_FileContent -notmatch 'Prerelease\s*='">
                  <original><![CDATA[(?mi)^(?<psdata>(?<newline>\s*)PSData \= @\{\r\n)(?<end>.*)]]></original>
                  <substitute>${psdata}${newline}    # Prerelease = ''${end}</substitute>
            </replace>
    </modify>

    <!-- Make sure Prerelease property is not commented -->
    <modify path="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        condition="Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;">
            <replace condition="$PLASTER_FileContent -match '\#\s*Prerelease\s='">
                  <original><![CDATA[\#\s*Prerelease\s=]]></original>
                  <substitute>Prerelease = </substitute>
            </replace>
    </modify>

     <!-- Make sure ReleaseNotes property is not commented -->
    <modify path="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        condition="Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;">
            <replace condition="$PLASTER_FileContent -match '#\s*ReleaseNotes\s*=\s*'">
                  <original><![CDATA[#\s*ReleaseNotes\s*=\s*]]></original>
                  <substitute>ReleaseNotes = </substitute>
            </replace>
    </modify>

    <!-- Set FunctionsToExport property to recommended value -->
    <modify path="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        condition="Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;">
            <replace condition="$PLASTER_FileContent -match 'FunctionsToExport\s*=\s*''\*'''">
                  <original><![CDATA[FunctionsToExport\s*=\s*'\*']]></original>
                  <substitute>FunctionsToExport = @()</substitute>
            </replace>
    </modify>

    <!-- Set CmdletsToExport property to recommended value -->
    <modify path="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        condition="Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;">
            <replace condition="$PLASTER_FileContent -match 'CmdletsToExport\s*=\s*''\*'''">
                  <original><![CDATA[CmdletsToExport\s*=\s*'\*']]></original>
                  <substitute>CmdletsToExport = @()</substitute>
            </replace>
    </modify>

    <!-- Set VariablesToExport property to recommended value -->
    <modify path="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        condition="Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;">
            <replace condition="$PLASTER_FileContent -match 'VariablesToExport\s*=\s*''\*'''">
                  <original><![CDATA[VariablesToExport\s*=\s*'\*']]></original>
                  <substitute>VariablesToExport = @()</substitute>
            </replace>
    </modify>

    <!-- Set AliasesToExport property to recommended value -->
    <modify path="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        condition="Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;">
            <replace condition="$PLASTER_FileContent -match 'AliasesToExport\s*=\s*''\*'''">
                  <original><![CDATA[AliasesToExport\s*=\s*'\*']]></original>
                  <substitute>AliasesToExport = @()</substitute>
            </replace>
    </modify>

    <!-- Set RequiredModules property to recommended value -->
    <modify path="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        condition="Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;">
            <replace condition="$PLASTER_FileContent -match '#\s*RequiredModules\s*=\s*@\(\s*\)'">
                  <original><![CDATA[#\s*RequiredModules\s*=\s*@\(\s*\)]]></original>
                  <substitute>RequiredModules = @()</substitute>
            </replace>
    </modify>

    <!-- Remove blank lines from end of module manifest (seems to be a bug using <modify> that generates additional blank lines at end of file) -->
    <modify path="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1"
        condition="Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psd1&quot;">
            <replace>
                  <original><![CDATA[(})\n+$]]></original>
                  <substitute>$1</substitute>
            </replace>
    </modify>

    <templateFile
        source="module.template"
        destination="${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psm1"
        condition="-not (Test-Path &quot;${PLASTER_PARAM_ModuleName}/$(${PLASTER_PARAM_SourceDirectory} ?? 'Source')/${PLASTER_PARAM_ModuleName}.psm1&quot;)"
    />

    <!--   MIT License -->
    <templateFile source="../LICENSES/LICENSE.MIT.template"
                  destination="${PLASTER_PARAM_ModuleName}/LICENSE"
                  condition="${PLASTER_PARAM_LicenseType} -eq 'MIT'"
    />

    <!--   APACHE License -->
    <templateFile source="../LICENSES/LICENSE.Apache.template"
                  destination="${PLASTER_PARAM_ModuleName}/LICENSE"
                  condition="${PLASTER_PARAM_LicenseType} -eq 'Apache'"
    />


    <!-- Add Markup help files -->
    <templateFile source="README.md.template"
                  destination="${PLASTER_PARAM_ModuleName}/README.md"
    />

   <!-- CONTRIBUTING MD -->
   <file source="CONTRIBUTING.md"
          destination="${PLASTER_PARAM_ModuleName}/CONTRIBUTING.md"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule')"
    />

   <!-- CODE OF CONDUCT MD -->
   <file source="CODE_OF_CONDUCT.md"
          destination="${PLASTER_PARAM_ModuleName}/CODE_OF_CONDUCT.md"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule')"
    />

   <!-- SECURITY MD GENERIC -->
   <file source="SECURITY.md"
          destination="${PLASTER_PARAM_ModuleName}/SECURITY.md"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule')"
    />

   <!-- CHANGELOG MD -->
   <!-- <templateFile source="CHANGELOG.md.template"
          destination="${PLASTER_PARAM_ModuleName}/CHANGELOG.md"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule')"
   /> -->

   <!-- GITVERSION CONFIG YAML -->
   <templateFile source="../Git/GitVersion.yml.template"
          destination="${PLASTER_PARAM_ModuleName}/GitVersion.yml"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseGitVersion} -eq 'true'"
    />
   
   <!-- MARKDOWN LINT -->
   <!-- 
   <file source="markdownlint.json"
          destination="${PLASTER_PARAM_ModuleName}/.markdownlint.json"
    /> -->

   <!-- VSCODE SETTINGS -->
   <file source="../VscodeConfig/settings.json"
          destination="${PLASTER_PARAM_ModuleName}/.vscode/settings.json"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseVSCode} -eq 'true'"
    />

    <!-- PSScriptAnalyzer VSCODE CONFIG -->
    <file source="../VscodeConfig/analyzersettings.psd1"
          destination="${PLASTER_PARAM_ModuleName}/.vscode/analyzersettings.psd1"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseVSCode} -eq 'true'"
    />

    <!-- VSCODE SETTINGS -->
    <file source="../VscodeConfig/extensions.json"
          destination="${PLASTER_PARAM_ModuleName}/.vscode/extensions.json"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseVSCode} -eq 'true'"
    />
    
    <file source="../VscodeConfig/tasks.json"
          destination="${PLASTER_PARAM_ModuleName}/.vscode/tasks.json"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseVSCode} -eq 'true'"
    />

   <!-- GITHUB TEMPLATES -->
   <file source=""
          destination="${PLASTER_PARAM_ModuleName}/.github"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseGitHub} -eq 'true'"
    />

    <file source="../GithubConfig/PULL_REQUEST_TEMPLATE.md"
          destination="${PLASTER_PARAM_ModuleName}/.github/PULL_REQUEST_TEMPLATE.md"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseGitHub} -eq 'true'"
    />

    <file source=""
          destination="${PLASTER_PARAM_ModuleName}/.github/ISSUE_TEMPLATE"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseGitHub} -eq 'true'"
    />

    <templateFile source="../GithubConfig/ISSUE_TEMPLATE/config.yml.template"
          destination="${PLASTER_PARAM_ModuleName}/.github/ISSUE_TEMPLATE/config.yml"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseGitHub} -eq 'true'"
    />

    <file source="../GithubConfig/ISSUE_TEMPLATE/General.md"
          destination="${PLASTER_PARAM_ModuleName}/.github/ISSUE_TEMPLATE/General.md"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseGitHub} -eq 'true'"
    />

    <templateFile source="../GithubConfig/ISSUE_TEMPLATE/Problem_with_module.yml.template"
          destination="${PLASTER_PARAM_ModuleName}/.github/ISSUE_TEMPLATE/Problem_with_module.yml"
          condition="${PLASTER_PARAM_ModuleType} -in @('FullModule') -or ${PLASTER_PARAM_UseGitHub} -eq 'true'"
    />
  </content>
</plasterManifest>
